# -*- coding: utf-8 -*-
"""Mental Disorder Diagnosis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/mental-disorder-diagnosis-57b201ae-70a5-448a-bfd4-42d6e253fb76.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20250225/auto/storage/goog4_request%26X-Goog-Date%3D20250225T210648Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D52b9bfed2ba951180151593640f5a3503da05ca525746762a1a03c5a94e06f80e269030dbb392802854e5a34ec1520bb8d810b22148f74add48d0a8e7cc8bb7ba2a45aa313eafb5c135bc21990a56ca144a1508a498529566f64fa340a449bc66b3675b7deab99c75eec8f07c0e1a7c2c7186c1c1bba326b5f1744612bb03f93c3631a4877dce6c28bf6db343b248f25b24209ba5d1c049c4cfbbd86ac8d513a0dc8c03334437630728fb740d76256351326e1d627a0919bff0d98e531955e698009c198db59088317dc7d238e044d3e7345d8bcc757346f73dffdbdd448f4e53cef9f3c5be4b77abb37680e940edf642e74f5a771c4243119f850831ea02a5f
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.
import kagglehub
cid007_mental_disorder_classification_path = kagglehub.dataset_download('cid007/mental-disorder-classification')

print('Data source import complete.')

import pandas as pd
import numpy as np
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sb
import plotly.subplots as sp
import plotly.graph_objs as go
from sklearn.model_selection import train_test_split
from sklearn.feature_selection import SelectKBest
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report
from sklearn.ensemble import RandomForestClassifier

df=pd.read_csv('/kaggle/input/mental-disorder-classification/Dataset-Mental-Disorders.csv',index_col='Patient Number')
df.head()

df.info()

for i in df.columns:
    print(f"{i}: {df[i].unique()}")

df.loc[df[df['Suicidal thoughts']=='YES ']['Suicidal thoughts'].index[0],'Suicidal thoughts']='YES'

from sklearn.preprocessing import LabelEncoder
encoders={}
for i in df.columns[:-1]:
    encoders[i]=LabelEncoder()
    encoders[i].fit(df[i])
    df[i]=encoders[i].transform(df[i])

from sklearn.feature_selection import mutual_info_classif
feature_selection=SelectKBest(score_func=mutual_info_classif)
feature_selection=feature_selection.fit(df[df.columns[:-1]],df[df.columns[-1]])

features_scores=pd.Series(feature_selection.scores_,df.columns[:-1])
features_scores.nlargest(18).plot(kind='barh',title="features' scores")
plt.show()

x_train,x_test,y_train,y_test=train_test_split(df[features_scores.nlargest(5).index],df[df.columns[-1]],test_size=0.3,random_state=2,shuffle=True)

from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestClassifier

param_grid = {
    'bootstrap': [True],
    'max_depth': [120],
    'max_features': [2, 3],
    'min_samples_leaf': [3, 4],
    'min_samples_split': [10, 12],
    'n_estimators': [300, 1000]
}

model = RandomForestClassifier()

grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=3, n_jobs=-1, verbose=2, scoring='accuracy')

grid_search.fit(x_train, y_train)

best_model = grid_search.best_estimator_

y_pred = best_model.predict(x_test)

from sklearn.metrics import accuracy_score, classification_report

accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

print(f"Best Model Accuracy: {accuracy:.4f}")
print("Classification Report:\n", report)

import joblib

# Save the trained model
joblib.dump(best_model, 'depression_model.pkl')

